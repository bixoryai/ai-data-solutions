name: PR Automation

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper change analysis
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Generate PR Content
        id: pr-content
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Get the first commit message as the PR title
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.event.pull_request.head.sha }})
          COMMIT_MSG_SHORT=$(echo "$COMMIT_MSG" | head -n 1)
          
          # Build list of changed files with bullets
          CHANGED_FILES_BULLETS=$(echo "$CHANGED_FILES" | grep -v "^$" | sed 's/^/- /')
          
          # Count changes by directory for summary
          DIR_SUMMARY=$(echo "$CHANGED_FILES" | grep -v "^$" | sed 's#/.*##' | sort | uniq -c | sort -nr)
          
          # Determine type of changes
          TYPE=""
          if echo "$CHANGED_FILES" | grep -q "\.md\|docs/"; then
            TYPE="documentation update"
          elif echo "$CHANGED_FILES" | grep -q "\.tsx\|\.jsx"; then
            if echo "$CHANGED_FILES" | grep -q "test\|spec"; then
              TYPE="bug fix with tests"
            else
              TYPE="new feature or enhancement"
            fi
          elif echo "$CHANGED_FILES" | grep -q "\.css\|\.scss"; then
            TYPE="style update"
          elif echo "$CHANGED_FILES" | grep -q "\.yml\|\.yaml\|\.json"; then
            TYPE="configuration update"
          else
            TYPE="other changes"
          fi
          
          # Generate component changes if applicable
          COMPONENT_CHANGES=""
          if echo "$CHANGED_FILES" | grep -q "\.tsx\|\.jsx"; then
            COMPONENT_FILES=$(echo "$CHANGED_FILES" | grep "\.tsx\|\.jsx" | sort)
            COMPONENT_CHANGES="### React Components Modified:\n    $COMPONENT_FILES"
          fi
          
          # Generate doc changes if applicable
          DOC_CHANGES=""
          if echo "$CHANGED_FILES" | grep -q "\.md\|docs/"; then
            DOC_FILES=$(echo "$CHANGED_FILES" | grep "\.md\|docs/" | sort)
            DOC_CHANGES="### Documentation Updates:\n    $DOC_FILES"
          fi
          
          # Calculate stats
          TOTAL_FILES=$(echo "$CHANGED_FILES" | grep -v "^$" | wc -l)
          
          # Store all content
          echo "commit_msg=$COMMIT_MSG_SHORT" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES_BULLETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "dir_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$DIR_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "component_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$COMPONENT_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "doc_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$DOC_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Update PR Description for New PR
        if: github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |-
            const existingBody = context.payload.pull_request.body || '';
            
            // Only update if the template still has placeholders
            if (existingBody.includes('<!-- Provide a brief description') || existingBody.trim() === '') {
              // Start with existing template
              let newBody = existingBody;
              
              // Check type and set corresponding checkbox
              const type = '${{ steps.pr-content.outputs.type }}';
              if (type.includes('bug fix')) {
                newBody = newBody.replace('- [ ] Bug fix', '- [x] Bug fix');
              } else if (type.includes('new feature')) {
                newBody = newBody.replace('- [ ] New feature', '- [x] New feature');
              } else if (type.includes('documentation')) {
                newBody = newBody.replace('- [ ] Documentation update', '- [x] Documentation update');
              } else if (type.includes('style update')) {
                newBody = newBody.replace('- [ ] Style update', '- [x] Style update');
              } else if (type.includes('configuration')) {
                newBody = newBody.replace('- [ ] Other', '- [x] Other (configuration update)');
              }
              
              // Add description if placeholder is still there
              if (newBody.includes('<!-- Provide a brief description')) {
                newBody = newBody.replace('<!-- Provide a brief description of the changes in this PR -->', 
                  '${{ steps.pr-content.outputs.commit_msg }}');
              }
              
              // Add solution approach with comprehensive information
              if (newBody.includes('<!-- Brief description of the approach taken')) {
                // Build a detailed solution approach section
                const solutionApproach = 'This PR makes the following changes:\n\n' +
                  '### Summary\n' +
                  '- Total files changed: ${{ steps.pr-content.outputs.total_files }}\n' +
                  '- Type of changes: ${{ steps.pr-content.outputs.type }}\n\n' +
                  '### Changes by directory:\n' +
                  '    ${{ steps.pr-content.outputs.dir_summary }}\n\n' +
                  '${{ steps.pr-content.outputs.component_changes }}\n\n' +
                  '${{ steps.pr-content.outputs.doc_changes }}\n\n' +
                  '### Full list of changed files:\n' +
                  '    ${{ steps.pr-content.outputs.changed_files }}';
                
                newBody = newBody.replace('<!-- Brief description of the approach taken to implement the solution -->', 
                  solutionApproach);
              }
              
              github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: newBody
              });
              
              console.log('Updated PR description with auto-generated content');
            } else {
              console.log('PR description already customized, skipping auto-update');
            }
            
      - name: Add or Update PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üîç PR Change Summary
            
            This comment is automatically generated and updated when the PR changes.
            
            **Total files changed:** ${{ steps.pr-content.outputs.total_files }}  
            **Last commit message:** ${{ steps.pr-content.outputs.commit_msg }}
            
            ### Changes by directory:
            ```
            ${{ steps.pr-content.outputs.dir_summary }}
            ```
            
            ${{ steps.pr-content.outputs.component_changes }}
            
            ${{ steps.pr-content.outputs.doc_changes }}
            
            ---
            *Last updated: ${{ github.event.pull_request.updated_at }}*
          edit-mode: replace 
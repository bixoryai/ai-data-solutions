name: PR Checks

on:
  pull_request:

jobs:
  test-and-build-changed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Find changed npm projects
        id: find-changed
        run: |
          # Get list of changed files in the PR
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Changed files: $CHANGED_FILES"
          # Find unique top-level project directories with package.json that have changed files
          CHANGED_PROJECTS=""
          for FILE in $CHANGED_FILES; do
            DIR=$FILE
            while [ "$DIR" != "." ] && [ "$DIR" != "/" ]; do
              if [ -f "$DIR/package.json" ]; then
                CHANGED_PROJECTS="$CHANGED_PROJECTS $DIR"
                break
              fi
              DIR=$(dirname "$DIR")
            done
          done
          # Remove duplicates
          CHANGED_PROJECTS=$(echo $CHANGED_PROJECTS | tr ' ' '\n' | sort | uniq)
          echo "Changed projects: $CHANGED_PROJECTS"
          echo "changed_projects<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PROJECTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Test and build changed projects
        run: |
          CHANGED_PROJECTS="${{ steps.find-changed.outputs.changed_projects }}"
          if [ -z "$CHANGED_PROJECTS" ]; then
            echo "No changed npm projects to test. Skipping."
            exit 0
          fi
          for PROJECT_DIR in $CHANGED_PROJECTS; do
            echo "üîç Checking project: $PROJECT_DIR"
            cd "$GITHUB_WORKSPACE/$PROJECT_DIR"
            echo "Installing dependencies..."
            npm ci
            if grep -q "\"test\":" package.json; then
              echo "Running tests..."
              npm test -- --watchAll=false --passWithNoTests
            fi
            if grep -q "\"build\":" package.json; then
              echo "Checking build..."
              npm run build
            fi
            cd "$GITHUB_WORKSPACE"
            echo "‚úÖ Finished checking $PROJECT_DIR"
            echo "-------------------------------------"
          done 